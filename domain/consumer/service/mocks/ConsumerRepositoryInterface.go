// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	domain "Sharykhin/rent-car/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "Sharykhin/rent-car/domain/consumer/model"
)

// ConsumerRepositoryInterface is an autogenerated mock type for the ConsumerRepositoryInterface type
type ConsumerRepositoryInterface struct {
	mock.Mock
}

// CreateConsumer provides a mock function with given fields: ctx, consumer
func (_m *ConsumerRepositoryInterface) CreateConsumer(ctx context.Context, consumer *model.ConsumerModel) (*model.ConsumerModel, error) {
	ret := _m.Called(ctx, consumer)

	var r0 *model.ConsumerModel
	if rf, ok := ret.Get(0).(func(context.Context, *model.ConsumerModel) *model.ConsumerModel); ok {
		r0 = rf(ctx, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ConsumerModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ConsumerModel) error); ok {
		r1 = rf(ctx, consumer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumerByID provides a mock function with given fields: ctx, ID
func (_m *ConsumerRepositoryInterface) GetConsumerByID(ctx context.Context, ID domain.ID) (*model.ConsumerModel, error) {
	ret := _m.Called(ctx, ID)

	var r0 *model.ConsumerModel
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) *model.ConsumerModel); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ConsumerModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
