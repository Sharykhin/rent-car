// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	domain "Sharykhin/rent-car/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "Sharykhin/rent-car/domain/car/model"
)

// CarRepositoryInterface is an autogenerated mock type for the CarRepositoryInterface type
type CarRepositoryInterface struct {
	mock.Mock
}

// CreateCar provides a mock function with given fields: ctx, c
func (_m *CarRepositoryInterface) CreateCar(ctx context.Context, c *model.CarModel) (*model.CarModel, error) {
	ret := _m.Called(ctx, c)

	var r0 *model.CarModel
	if rf, ok := ret.Get(0).(func(context.Context, *model.CarModel) *model.CarModel); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CarModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.CarModel) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarByID provides a mock function with given fields: ctx, ID
func (_m *CarRepositoryInterface) GetCarByID(ctx context.Context, ID domain.ID) (*model.CarModel, error) {
	ret := _m.Called(ctx, ID)

	var r0 *model.CarModel
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) *model.CarModel); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CarModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCar provides a mock function with given fields: ctx, car
func (_m *CarRepositoryInterface) UpdateCar(ctx context.Context, car *model.CarModel) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CarModel) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
